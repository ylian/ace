/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2012, Ajax.org B.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Ajax.org B.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ***** END LICENSE BLOCK ***** */

/* This file was autogenerated from /Users/ylian/dev/Stata-Sublime-Plugin/Stata.tmLanguage (uuid: ) */
/****************************************************************************************
 * IT MIGHT NOT BE PERFECT ...But it's a good start from an existing *.tmlanguage file. *
 * fileTypes                                                                            *
 ****************************************************************************************/

define(function(require, exports, module) {
"use strict";

var oop = require("../lib/oop");
var TextHighlightRules = require("./text_highlight_rules").TextHighlightRules;

var StataHighlightRules = function() {
    // regexp must not have capturing parentheses. Use (?:) instead.
    // regexps are ordered -> the first match is used

    this.$rules = { start: 
       [ { token: 'dummy.stata',
           regex: '(?:by|drop|format|generate|parse|sort)(?=\\()' },
         { token: 'dummy.stata', regex: 'string(?=\\))' },
         { token: 'dummy.stata', regex: 'string(?=\\s+)' },
         { token: 'dummy.stata', regex: 'max(?=\\s*=)' },
         { token: 'comment.block.stata',
           regex: '/\\*',
           push: 
            [ { token: 'comment.block.stata', regex: '\\*/', next: 'pop' },
              { defaultToken: 'comment.block.stata' } ] },
         { token: 'comment.double-slash.stata',
           regex: '(?:^|\\s)//[^/].*$' },
         { token: 'comment.triple-slash.stata',
           regex: '(?:^|\\s)///[^/].*$' },
         { token: 'comment.star.stata', regex: '^\\*.*$' },
         { token: 'constant.numeric.stata',
           regex: '\\b\\d+(?:\\.\\d+)?|\\.\\d+' },
         { token: 'constant.character.stata',
           regex: '~|!|&|\\||%|:|<|>|=|\\+|-|\\*|/|\\\\|\\^|\\?' },
         { token: 'constant.language.stata', regex: '\\b_pi\\b' },
         { token: 'constant.other.stata', regex: '\\.[a-z]{1}\\b' },
         { token: 'constant.other.stata', regex: '\\.' },
         { token: 'entity.name.function.stata',
           regex: '\\b(?:bofd|Cdhms|Chms|Clock|clock|Cmdyhms|Cofc|cofC|Cofd|cofd|daily|date|day|dhms|dofb|dofC|dofc|dofh|dofm|dofq|dofw|dofy|dow|doy|halfyear|halfyearly|hh|hhC|hms|hofd|hours|mdy|mdyhms|minutes|mm|mmC|mofd|month|monthly|msofhours|msofminutes|msofseconds|qofd|quarter|quarterly|seconds|ss|ssC|tC|tc|td|th|tm|tq|tw|week|weekly|wofd|year|yearly|yh|ym|yofd|yq|yw)(?=\\()' },
         { token: 'entity.name.function.stata',
           regex: '\\b(?:abs|ceil|cloglog|comb|digamma|exp|floor|int|invcloglog|invlogit|ln|lnfactorial|lngamma|log|log10|logit|max|min|mod|reldif|round|sign|sqrt|sum|trigamma|trunc)(?=\\()' },
         { token: 'entity.name.function.stata',
           regex: '\\b(?:cholesky|corr|diag|get|hadamard|I|inv|invsym|J|matuniform|nullmat|sweep|vec|vecdiag|colnumb|colsof|det|diag0cnt|el|issymmetric|matmissing|mreldif|rownumb|rowsof|trace)(?=\\()' },
         { token: 'entity.name.function.stata',
           regex: '\\b(?:autocode|byteorder|c|_caller|chop|clip|cond|epsdouble|epsfloat|fileexists|fileread|filereaderror|filewrite|float|fmtwidth|has_eprop|inlist|inrange|irecode|matrix|maxbyte|maxdouble|maxfloat|maxint|maxlong|mi|minbyte|mindouble|minfloat|minint|minlong|missing|recode|replay|return|scalar|smallestdouble)(?=\\()' },
         { token: 'entity.name.function.stata',
           regex: '\\b(?:runiform|runiform|runiformint|rbeta|rbinomial|rchi2|rexponential|rgamma|rhypergeometric|rlogistic|rlogistic|rlogistic|rnbinomial|rnormal|rnormal|rnormal|rpoisson|rt|rweibull|rweibull|rweibullph|rweibullph)(?=\\()' },
         { token: 'entity.name.function.stata',
           regex: '\\b(?:tin|twithin)(?=\\()' },
         { token: 'entity.name.function.stata',
           regex: '\\b(?:betaden|ibeta|ibetatail|invibeta|invibetatail|nbetaden|nibeta|invnibeta|binomialp|binomial|binomialtail|invbinomial|invbinomialtail|chi2den|chi2|chi2tail|invchi2|invchi2tail|nchi2den|nchi2|nchi2tail|invnchi2|invnchi2tail|npnchi2|dunnettprob|invdunnettprob|exponentialden|exponential|exponentialtail|invexponential|invexponentialtail|Fden|F|Ftail|invF|invFtail|nFden|nF|nFtail|invnF|invnFtail|npnF|gammaden|gammap| |gammaptail|invgammap|invgammaptail|dgammapda|dgammapdada|dgammapdadx|dgammapdx|dgammapdxdx|lnigammaden|hypergeometricp|hypergeometric|logisticden|logisticden|logisticden|logistic|logistic|logistic|logistictail|logistictail|logistictail|invlogistic|invlogistic|invlogistic|invlogistictail|invlogistictail|invlogistictail|nbinomialp|nbinomial|nbinomialtail|invnbinomial|invnbinomialtail|normalden|normalden|normalden|normal|invnormal|lnnormalden|lnnormalden|lnnormalden|lnnormal|binormal|lnmvnormalden|poissonp|poisson|poissontail|invpoisson|invpoissontail|tden|t|ttail|invt|invttail|invnt|invnttail|ntden|nt|nttail|npnt|tukeyprob|invtukeyprob|weibullden|weibullden|weibull|weibull|weibulltail|weibulltail|invweibull|invweibull|invweibulltail|invweibulltail|weibullphden|weibullphden|weibullph|weibullph|weibullphtail|weibullphtail|invweibullph|invweibullph|invweibullphtail|invweibullphtail|lnwishartden|lniwishartden)(?=\\()' },
         { token: 'entity.name.function.stata',
           regex: '\\b(?:abbrev|char|uchar|collatorlocale|collatorversion|indexnot|plural|plural|real|regexm|regexr|regexs|ustrregexm|ustrregexrf|ustrregexra|ustrregexs|soundex|soundex_nara|strcat|strdup|string|string|stritrim|strlen|ustrlen|udstrlen|strlower|ustrlower|strltrim|ustrltrim|strmatch|strofreal|strofreal|strpos|ustrpos|strproper|ustrtitle|strreverse|ustrreverse|strrpos|ustrrpos|strrtrim|ustrrtrim|strtoname|ustrtoname|strtrim|ustrtrim|strupper|ustrupper|subinstr|usubinstr|subinword|substr|usubstr|udsubstr|tobytes|uisdigit|uisletter|ustrcompare|ustrcompareex|ustrfix|ustrfrom|ustrinvalidcnt|ustrleft|ustrnormalize|ustrright|ustrsortkey|ustrsortkeyex|ustrto|ustrtohex|ustrunescape|word|ustrword|wordbreaklocale|wordcount|ustrwordcount)(?=\\()' },
         { token: 'entity.name.function.stata',
           regex: '\\b(?:acos|acosh|asin|asinh|atan|atan2|atanh|cos|cosh|sin|sinh|tan|tanh)(?=\\()' },
         { token: 'entity.name.function.stata',
           regex: '\\b(?:anycount|anymatch|anyvalue|concat|count|cut|diff|ends|fill|group|iqr|kurt|mad|max|mdev|mean|median|min|mode|mtr|pc|pctile|rank|rowfirst|rowlast|rowmax|rowmean|rowmedian|rowmin|rowmiss|rownonmiss|rowpctile|rowsd|rowtotal|sd|seq|skew|std|tag|total)(?=\\()' },
         { token: 'entity.name.function.stata', regex: '[ic]\\.' },
         { token: 'keyword.control.stata',
           regex: '\\b(?:for|foreach|forvalues|while|continue|break|nobreak|else)\\b' },
         { token: 'keyword.control.stata', regex: '^\\s*if' },
         { token: 'keyword.control.stata', regex: '{|}|\\[|]|\\(|\\)|,' },
         { token: 'keyword.operator.stata',
           regex: '\\b(?:if|in|using|of)\\b' },
         { token: 'keyword.other.stata',
           regex: '\\b(?:about|ac|acprplot|adjust|ado|adopath|adoupdate|alpha|ameans|anova|anovadef|aorder|append|arch|archlm|areg|arfima|args|arima|asclogit|asmprobit|asroprobit|assert|avplot|avplots|bayesgraph|bayesmh|bayesstats|bayestest|bcal|bcskew0|betareg|bgodfrey|binreg|biplot|biprobit|bitest|bitesti|bitowt|blogit|bmemsize|boot|bootsamp|bootstrap|boxcox|bprobit|brier|browse|brr|brrstat|bs|bsample|bsqreg|bstat|bstrap|by|bys|ca|cabiplot|camat|candisc|canon|caprojection|cap|capture|cc|cchart|cci|cd|centile|cf|changeeol|char|chdir|checkdlgfiles|checkestimationsample|checkhlpfiles|checksum|chelp|churdle|ci|cii|cilevel|class|classutil|clear|clist|clogit|clogitp|cloglog|clonevar|close|clslistarray|cluster|clustermat|cmdlog|cnreg|cnsreg|codebook|collapse|colsof|compare|compress|coefplot|confirm|conren|constraint|contract|contrast|copy|copyright|copysource|corr2data|correlate|corrgram|count|cox|coxbase|coxhaz|coxvar|cpoisson|cprplot|crc|creturn|cross|cs|cscript|csi|ct|ctset|cttost|cumsp|cumul|cusum|cutil|datasignature|datetof|db|dbeta|decode|deff|define|describe|destring|devcon|dfactor|dfbeta|dfgls|dfuller|difmh|dir|dirstats|discard|discrim|di|dis|display|do|doedit|dotplot|dprobit|drawnorm|drop|ds|dstdize|dtaverify|dtaversion|duplicates|durbina|dvech|dwstat|dydx|eclass|edit|egen|eivreg|emdef|encode|end|eq|erase|ereg|ereghet|ereturn|error|esize|esizei|estat|estimates|eteffects|etodow|etof|etomdy|etpoisson|etregress|excel|exit|exlogistic|expand|expandcl|expoisson|export|factor|factormat|fc|fcast|fdadescribe|fdasave|fdause|filefilter|fillin|findfile|findit|fit|flist|forecast|format|fp|fpc|fpredict|fracgen|fracplot|fracpoly|fracpred|fracreg|fre|frontier|ftodate|ftoe|ftomdy|ftowdate|fv|fvexpand|fvrevar|fvset|fvunab|gamma|gammahet|gen|generate|genrank|genstd|genvmean|getmata|gettoken|gladder|glm|glmpred|global|glogit|gmeans|gmm|gnbreg|gompertz|gompertzhet|gphdot|gphpen|gphprint|gprefs|gprobit|gr7|graph|graph7|grebar|greigen|grmeanby|gsem|gsort|gwood|hadimvo|hareg|hausman|haver|heckman|heckoprobit|heckprobit|help|hereg|hetprobit|hettest|hexdump|hilite|histogram|hlogit|hmeans|hotelling|hprobit|hreg|hsearch|icc|icd10|icd9|icd9p|iis|import|impute|imtest|inbase|include|infile|infix|input|insheet|insobs|inspect|integ|inten|intreg|ipolate|iqreg|ir|irf|irfm|iri|irt|irtgraph|isid|istdize|ivpoisson|ivprobit|ivregress|ivtobit|jackknife|jkstat|joinby|kap|kapmeier|kappa|kapwgt|kdensity|keep|ksmirnov|ktau|kwallis|lab|label|labelbook|ladder|levelsof|leverage|lfit|lincom|line|linktest|list|llogistic|llogistichet|lnormal|lnormalhet|lnskew0|loadingplot|local|log|logistic|logit|loglogs|logrank|loneway|long|lookfor|lookup|lowess|lpoly|lpredict|lrecomp|lroc|lrtest|ls|lsens|lstat|ltable|lv|lvr2plot|macro|makecns|man|manova|manovatest|mantel|margins|marginsplot|mark|markin|markout|marksample|mata|matalabel|matcproc|matlist|matname|matrix|matstrik|mca|mcaplot|mcaprojection|mcc|mcci|mds|mdsconfig|mdslong|mdsmat|mdsshepard|mdytoe|mdytof|mean|means|mecloglog|median|meglm|melogit|memory|memsize|menbreg|meologit|meoprobit|mepoisson|meprobit|meqparse|meqrlogit|meqrpoisson|merge|mestreg|mfp|mfx|mgarch|mhelp|mhodds|mi|minbound|misstable|mixed|mkassert|mkdir|mkmat|mkspline|ml|mleval|mlexp|mlmatbysum|mlmatsum|mlogit|mlopts|mlsum|mlvecsum|mnl0_|modify|mopt|move|mprobit|mswitch|mvdecode|mvencode|mvreg|mvtest|namelist|nbreg|nestreg|net|newey|news|nl|nlcom|nlogit|nlogitgen|nlogittree|nlpred|nlsur|noi|noisily|notes|nptrend|numlabel|odbc|ologit|ologitp|oneway|open|oprobit|oprobitp|order|orthog|orthpoly|outfile|outsheet|ovtest|pac|palette|parse|pause|pca|pcamat|pchart|pchi|pcorr|pctile|pentium|pergram|permute|personal|pkcollapse|pkcross|pkequiv|pkexamine|pkshape|pksumm|plot|plugin|pnorm|poisgof|poisson|post|postclose|postest|postfile|postrtoe|poststrata|postutil|postweight|power|pperron|prais|predict|predictnl|preserve|print|probit|procoverlay|procrustes|profiler|program|proportion|prtest|prtesti|psdensity|putexcel|putmata|pwcompare|pwcorr|pwd|pwmean|qby|qbys|qchi|qladder|qnorm|qqplot|qreg|qu|quadchk|quantile|query|qui|quietly|range|ranksum|ratio|rchart|rclass|rcof|recast|recode|reg|reg3|regdw|regress|remap|rename|renamevarno|renpfix|repeat|replace|reshape|restore|return|rmdir|robvar|roccomp|rocfit|rocgold|rocplot|rocreg|rocregplot|rocregstat|roctab|rolling|rologit|rotate|rotatemat|rreg|run|runtest|rvfplot|rvpplot|safesum|sample|sampsi|save|savedresults|saveold|sbknown|sbsingle|scalar|scatter|scobit|score|scoreplot|screeplot|sdr|sdtest|sdtesti|search|sem|sembuilder|separate|sepby|seperate|serrbar|serset|set|sfrancia|shell|shewhart|shp2dta|signestimationsample|signrank|signtest|simulate|singleunit|sizeof|sktest|sleep|slogit|smooth|snapspan|sort|spearman|spgrid|spikeplot|spkde|split|spmap|sqreg|sreturn|ssc|ssd|sspace|stack|statsby|stbase|stci|stcox|stcoxkm|stcrr|stcrre|stcrreg|stcstat|stcurve|stdescribe|stem|stepwise|stereg|stfill|stgen|stir|stjoin|stmc|stmh|storedresults|stphplot|stphtest|stpower|stptime|strata|strate|streg|streset|strlread|strlwrite|strpos|sts|stset|stsplit|stsum|stteffects|sttocc|sttoct|stvary|stweib|su|suest|summarize|sunflower|sureg|survcurv|survsum|svar|svmat|svy|svydescribe|svygen|svymarkout|svyopts|svyset|swilk|symmetry|symmi|symplot|syntax|sysdescribe|sysdir|sysuse|szroeter|tab|tab1|tab2|tabdisp|tabi|table|tabodds|tabstat|tabulate|tebalance|teffects|tempfile|tempname|tempvar|test|testnl|testparm|teststd|tetrachoric|timer|tis|tnbreg|tobit|tokenize|tostring|tpoisson|translate|translator|transmap|treatreg|trim|truncreg|tsappend|tset|tsfill|tsfilter|tsline|tsreport|tsrevar|tsrline|tsset|tssmooth|tsunab|ttest|ttesti|tutorial|twoway|type|typeof|ucm|unab|unabbrev|unabcmd|unicode|unzipfile|update|use|uselabel|varbasic|varfcast|vargranger|varirf|varlmar|varnorm|varsoc|varstable|varwle|vce|vec|veclmar|vecnorm|vecrank|vecstable|verinst|version|view|viewsource|vif|vwls|wdatetof|webdescribe|webgetsem|webseek|webuse|weibull|weibullhet|whelp|which|wide|wilcoxon|window|winexec|wntestb|wntestq|xi|xchart|xcorr|xmlsav|xmlsave|xmluse|xpose|xshell|xtabond|xtcloglog|xtcorr|xtdata|xtdescribe|xtdpd|xtdpdsys|xtfrontier|xtgee|xtgls|xthtaylor|xtile|xtintreg|xtivreg|xtline|xtlogit|xtmelogit|xtmepoisson|xtmixed|xtnbreg|xtologit|xtoprobit|xtpcse|xtpois|xtpoisson|xtpred|xtprobit|xtrc|xtrchh|xtreg|xtregar|xtset|xtstreg|xtsum|xttab|xttest0|xttobit|xttrans|xtunitroot|yx|zinb|zip|zipfile|ztest|ztesti|ztnb|ztp)\\b' },
         { token: 'storage.stata',
           regex: '\\br\\(',
           push: 
            [ { token: 'storage.stata', regex: '\\)', next: 'pop' },
              { defaultToken: 'storage.stata' } ] },
         { token: 'storage.stata',
           regex: '\\be\\(',
           push: 
            [ { token: 'storage.stata', regex: '\\)', next: 'pop' },
              { defaultToken: 'storage.stata' } ] },
         { token: 'storage.stata',
           regex: '\\bs\\(',
           push: 
            [ { token: 'storage.stata', regex: '\\)', next: 'pop' },
              { defaultToken: 'storage.stata' } ] },
         { token: 'string.quoted.double.stata',
           regex: '"',
           push: 
            [ { token: 'string.quoted.double.stata', regex: '"', next: 'pop' },
              { token: 'variable.other.local.stata',
                regex: '`',
                push: 
                 [ { token: 'variable.other.local.stata', regex: '\'', next: 'pop' },
                   { defaultToken: 'variable.other.local.stata' } ] },
              { token: 'string.other.compound.stata',
                regex: '`"',
                push: 
                 [ { token: 'string.other.compound.stata',
                     regex: '"\'',
                     next: 'pop' },
                   { defaultToken: 'string.other.compound.stata' } ] },
              { defaultToken: 'string.quoted.double.stata' } ] },
         { token: 'string.other.compound.stata',
           regex: '`"',
           push: 
            [ { token: 'string.other.compound.stata',
                regex: '"\'',
                next: 'pop' },
              { token: 'string', regex: '"' },
              { token: 'string.other.compound.stata',
                regex: '`"',
                push: 
                 [ { token: 'string.other.compound.stata',
                     regex: '"\'',
                     next: 'pop' },
                   { defaultToken: 'string.other.compound.stata' } ] },
              { token: 'string.quoted.double.stata',
                regex: '"',
                push: 
                 [ { token: 'string.quoted.double.stata', regex: '"', next: 'pop' },
                   { defaultToken: 'string.quoted.double.stata' } ] },
              { token: 'variable.other.local.stata',
                regex: '`',
                push: 
                 [ { token: 'variable.other.local.stata', regex: '\'', next: 'pop' },
                   { token: 'string.quoted.double.stata',
                     regex: '"',
                     push: 
                      [ { token: 'string.quoted.double.stata', regex: '"', next: 'pop' },
                        { token: 'variable.other.local.stata',
                          regex: '`',
                          push: 
                           [ { token: 'variable.other.local.stata', regex: '\'', next: 'pop' },
                             { defaultToken: 'variable.other.local.stata' } ] },
                        { defaultToken: 'string.quoted.double.stata' } ] },
                   { token: 'variable.other.local.stata',
                     regex: '`',
                     push: 
                      [ { token: 'variable.other.local.stata', regex: '\'', next: 'pop' },
                        { defaultToken: 'variable.other.local.stata' } ] },
                   { defaultToken: 'variable.other.local.stata' } ] },
              { defaultToken: 'string.other.compound.stata' } ] },
         { token: 'variable.parameter.stata',
           regex: '\\b(?:_all|_n|_N|_rc)\\b' },
         { token: 'variable.language.stata',
           regex: '\\b(?:fw|fweight|pw|pweight|aw|aweight|iw|iweight)\\b' },
         { token: 'variable.other.local.stata',
           regex: '`',
           push: 
            [ { token: 'variable.other.local.stata', regex: '\'', next: 'pop' },
              { token: 'string.other.compound.stata',
                regex: '`"',
                push: 
                 [ { token: 'string.other.compound.stata',
                     regex: '"\'',
                     next: 'pop' },
                   { defaultToken: 'string.other.compound.stata' } ] },
              { token: 'string.quoted.double.stata',
                regex: '"',
                push: 
                 [ { token: 'string.quoted.double.stata', regex: '"', next: 'pop' },
                   { defaultToken: 'string.quoted.double.stata' } ] },
              { token: 'variable.other.local.stata',
                regex: '`',
                push: 
                 [ { token: 'variable.other.local.stata', regex: '\'', next: 'pop' },
                   { defaultToken: 'variable.other.local.stata' } ] },
              { defaultToken: 'variable.other.local.stata' } ] },
         { token: 'variable.other.global.stata', regex: '\\$\\S+\\b' } ] }
    
    this.normalizeRules();
};

StataHighlightRules.metaData = { fileTypes: [ 'do', 'ado', 'dct', 'stata' ],
      foldingStartMarker: '/\\*|\\{\\s*$',
      foldingStopMarker: '\\*/|^\\s*\\}',
      name: 'Stata',
      scopeName: 'source.stata' }


oop.inherits(StataHighlightRules, TextHighlightRules);

exports.StataHighlightRules = StataHighlightRules;
});
