/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2012, Ajax.org B.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Ajax.org B.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ***** END LICENSE BLOCK ***** */

/* This file was autogenerated from /Users/ylian/Desktop/SAS.tmLanguage (uuid: ) */
/****************************************************************************************
 * IT MIGHT NOT BE PERFECT ...But it's a good start from an existing *.tmlanguage file. *
 * fileTypes                                                                            *
 ****************************************************************************************/

define(function(require, exports, module) {
"use strict";

var oop = require("../lib/oop");
var TextHighlightRules = require("./text_highlight_rules").TextHighlightRules;

var SASHighlightRules = function() {
    // regexp must not have capturing parentheses. Use (?:) instead.
    // regexps are ordered -> the first match is used

    this.$rules = { start: 
       [ { include: '#comments' },
         { token: [ 'support.function.sas', 'text', 'entity.name.function.sas' ],
           regex: '(proc)( )(\\w+)',
           caseInsensitive: true },
         { token: 
            [ 'support.function.sas',
              'text',
              'constant.other.table-name.sas' ],
           regex: '^(data)( )([^\\s]+)',
           caseInsensitive: true },
         { token: 
            [ 'entity.other.attribute-name.sas',
              'text',
              'constant.other.library-name.sas',
              'constant.other.table-name.sas' ],
           regex: '\\b(data|out)(=)((?:\\w+\\.)?)(\\w*)\\b',
           caseInsensitive: true },
         { token: 'support.function.sas',
           regex: '\\bsort|run|quit|output\\b',
           caseInsensitive: true },
         { token: 'constant.numeric.sas',
           regex: '\\b\\d+(?:\\.\\d+)*\\b' },
         { token: 'constant.sas', regex: '\\blow|high\\b' },
         { token: [ 'keyword.other.sas', 'text', 'variable.other.sas' ],
           regex: '\\b(by)( )([^\\s]+)\\b',
           caseInsensitive: true },
         { token: [ 'keyword.other.sas', 'text', 'variable.other.sas' ],
           regex: '(keep|drop|retain|format|class|var)( )([\\w\\s]+)',
           caseInsensitive: true },
         { token: [ 'keyword.other.sas', 'text', 'constant.other.table-name.sas' ],
           regex: '\\b(set|tables|merge)( )([\\w\\s]+)\\b',
           caseInsensitive: true },
         { token: 'keyword.control.sas',
           regex: '\\b(?:if|else|then|end)\\b' },
         { token: 'keyword.other.order.sas',
           regex: '\\bdescending\\b',
           caseInsensitive: true },
         { token: 'keyword.other.sas',
           regex: '\\btitle\\b',
           caseInsensitive: true },
         { token: 'keyword.operator.star.sas', regex: '\\*' },
         { token: 'keyword.operator.comparison.sas',
           regex: '\\b<|>|eq|ne\\b' },
         { token: 'keyword.null.sas', regex: ' \\. ' },
         { token: 'keyword.operator.math.sas', regex: '-|\\+|/' },
         { token: 'support.function.aggregate.sas',
           regex: '\\b(?:avg|sum)(?=\\s*\\()',
           caseInsensitive: true },
         { token: 
            [ 'constant.other.library-name.sas',
              'text',
              'constant.other.table-name.sas' ],
           regex: '(\\w+?)(\\.)(\\w+)' },
         { token: 'text',
           regex: 'proc sas;',
           push: 
            [ { token: 'text', regex: 'quit;', next: 'pop' },
              { include: 'source.sas' } ] },
         { include: '#strings' },
         { include: '#regexps' } ],
      '#comments': 
       [ { token: 
            [ 'comment.line.asterisk.sas',
              'punctuation.definition.comment.sas',
              'comment.line.asterisk.sas' ],
           regex: '^(\\s*)(\\*)(.*;\\s*$)' },
         { token: 'punctuation.definition.comment.sas',
           regex: '/\\*',
           push: 
            [ { token: 'punctuation.definition.comment.sas',
                regex: '\\*/',
                next: 'pop' },
              { defaultToken: 'comment.block.c' } ] } ],
      '#string_escape': [ { token: 'constant.character.escape.sas', regex: '\\\\.' } ],
      '#string_interpolation': 
       [ { token: 
            [ 'punctuation.definition.string.end.sas',
              'string.interpolated.sas',
              'string.interpolated.sas' ],
           regex: '(#\\{)([^\\}]*)(\\})' } ],
      '#strings': 
       [ { token: 
            [ 'punctuation.definition.string.begin.sas',
              'string.quoted.single.sas',
              'string.quoted.single.sas' ],
           regex: '(\')([^\'\\\\]*)(\')',
           comment: 'this is faster than the next begin/end rule since sub-pattern will match till end-of-line and sas files tend to have very long lines.' },
         { token: 'punctuation.definition.string.begin.sas',
           regex: '\'',
           push: 
            [ { token: 'punctuation.definition.string.end.sas',
                regex: '\'',
                next: 'pop' },
              { include: '#string_escape' },
              { defaultToken: 'string.quoted.single.sas' } ] },
         { token: 
            [ 'punctuation.definition.string.begin.sas',
              'string.quoted.other.backtick.sas',
              'string.quoted.other.backtick.sas' ],
           regex: '(`)([^`\\\\]*)(`)',
           comment: 'this is faster than the next begin/end rule since sub-pattern will match till end-of-line and sas files tend to have very long lines.' },
         { token: 'punctuation.definition.string.begin.sas',
           regex: '`',
           push: 
            [ { token: 'punctuation.definition.string.end.sas',
                regex: '`',
                next: 'pop' },
              { include: '#string_escape' },
              { defaultToken: 'string.quoted.other.backtick.sas' } ] },
         { token: 
            [ 'punctuation.definition.string.begin.sas',
              'string.quoted.double.sas',
              'string.quoted.double.sas' ],
           regex: '(")([^"#]*)(")',
           comment: 'this is faster than the next begin/end rule since sub-pattern will match till end-of-line and sas files tend to have very long lines.' },
         { token: 'punctuation.definition.string.begin.sas',
           regex: '"',
           push: 
            [ { token: 'punctuation.definition.string.end.sas',
                regex: '"',
                next: 'pop' },
              { include: '#string_interpolation' },
              { defaultToken: 'string.quoted.double.sas' } ] },
         { token: 'punctuation.definition.string.begin.sas',
           regex: '%\\{',
           push: 
            [ { token: 'punctuation.definition.string.end.sas',
                regex: '\\}',
                next: 'pop' },
              { include: '#string_interpolation' },
              { defaultToken: 'string.other.quoted.brackets.sas' } ] } ] }
    
    this.normalizeRules();
};

SASHighlightRules.metaData = { fileTypes: [ 'sas' ],
      foldingStartMarker: '(proc|data|%macro).*;$',
      foldingStopMarker: '(run|quit|%mend);',
      name: 'SAS',
      scopeName: 'source.sas' }


oop.inherits(SASHighlightRules, TextHighlightRules);

exports.SASHighlightRules = SASHighlightRules;
});