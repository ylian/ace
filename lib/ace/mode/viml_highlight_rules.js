/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2012, Ajax.org B.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Ajax.org B.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ***** END LICENSE BLOCK ***** */

/* This file was autogenerated from ../Sublime-VimL/VimL.tmLanguage (uuid: ) */
/****************************************************************************************
 * IT MIGHT NOT BE PERFECT ...But it's a good start from an existing *.tmlanguage file. *
 * fileTypes                                                                            *
 ****************************************************************************************/

define(function(require, exports, module) {
"use strict";

var oop = require("../lib/oop");
var TextHighlightRules = require("./text_highlight_rules").TextHighlightRules;

var VimLHighlightRules = function() {
    // regexp must not have capturing parentheses. Use (?:) instead.
    // regexps are ordered -> the first match is used

    this.$rules = { start: 
       [ { include: '#comment' },
         { include: '#string_quoted_double' },
         { include: '#string_quoted_single' },
         { include: '#string_regex' },
         { include: '#inline_comment' },
         { include: '#number_int' },
         { include: '#number_hex' },
         { include: '#keyword' },
         { include: '#support_function' },
         { include: '#support_variable' },
         { include: '#support_type' },
         { include: '#function_params' },
         { include: '#function_definition' },
         { include: '#function_call' },
         { include: '#function' },
         { include: '#variable' },
         { include: '#expr' } ],
      '#comment': [ { token: 'comment.line.quotes.viml', regex: '^\\s*".*$' } ],
      '#expr': 
       [ { token: 'storage.function.viml',
           regex: '\\|\\||&&|==(?:\\?|#)?|(?:!|>|<)=(?:#|\\?)?|(?:=|!)~(?:#|\\?)?|(?:>|<)(?:#|\\?)is|isnot|\\.|\\*|\\\\|%' } ],
      '#function': 
       [ { token: 'storage.function.viml',
           regex: '\\b(?:fu(?:n|nction)?|end(?:f|fu|fun|function)?)\\b' } ],
      '#function_call': 
       [ { token: 'support.function.any-method',
           regex: '(?:[sgbwtl]|)?:?[0-9a-zA-Z_#]+(?=\\()' } ],
      '#function_definition': 
       [ { token: 
            [ 'meta.function.viml',
              'storage.function.viml',
              'meta.function.viml' ],
           regex: '^(\\s*)(function)(\\s*!?\\s+)(?=(?:s:)?[0-9a-zA-Z_#]+\\s*\\()',
           push: 
            [ { token: 'punctuation.definition.parameters.begin.viml',
                regex: '\\(',
                next: 'pop' },
              { token: 'entity.name.function.viml',
                regex: '(?:s:)?[0-9a-zA-Z_#]+' },
              { defaultToken: 'meta.function.viml' } ] } ],
      '#function_params': [ { token: 'support.type.viml', regex: '-\\w+=' } ],
      '#inline_comment': 
       [ { token: 
            [ 'punctuation.definition.comment.vim',
              'comment.line.quotes.viml' ],
           regex: '(?!\\$)(")(?!\\{)(.*$)' } ],
      '#keyword': 
       [ { token: 'keyword.control.viml',
           regex: '\\b(?:if|while|for|return|end(?:if|for|while)?|au(?:g|group)|else(?:if|)?|do|in|:)\\b' } ],
      '#number_hex': [ { token: 'constant.numeric.hex', regex: '#[0-9a-f]{6}' } ],
      '#number_int': [ { token: 'constant.numeric.integer', regex: '-?\\d+' } ],
      '#string_quoted_double': 
       [ { token: 'string.quoted.double.viml',
           regex: '"(?:\\\\\\\\|\\\\"|[^$"])*"' } ],
      '#string_quoted_single': 
       [ { token: 'string.quoted.single.viml',
           regex: '\'(?:\\\\\\\\|\\\\\'|[^$\'])*\'' } ],
      '#string_regex': 
       [ { token: 'string.regexp.viml',
           regex: '/(?:\\\\\\\\|\\\\/|[^$/])*/' } ],
      '#support_function': 
       [ { token: 'support.function.viml',
           regex: '\\b(?:set(?:local|global)?|let|command|filetype|colorscheme|\\w*map|syn|exe(?:c|cute)?|ec(?:ho|)?|au(?:tocmd|)?)\\b' } ],
      '#support_type': [ { token: 'support.type.viml', regex: '<.*?>' } ],
      '#support_variable': 
       [ { token: 'support.variable.viml',
           regex: '\\b(?:am(?:enu|)?|(?:hl|inc)?search|[Bb]uf(?:[Nn]ew[Ff]ile|[Rr]ead)?|[Ff]ile[Tt]ype)\\b' } ],
      '#variable': 
       [ { token: 'variable.other.viml',
           regex: '(?:[sSgGbBwWlLaAvV]:|@|$|&(?!&))\\w*' } ] }
    
    this.normalizeRules();
};

VimLHighlightRules.metaData = { fileTypes: [ 'vim' ],
      foldingStartMarker: '^(if|while|for|fu|function|augroup|aug)',
      foldingStopMarker: '(endif|endwhile|endfor|endf|endfunction|augroup\\.END|aug\\.END)$',
      name: 'VimL',
      scopeName: 'source.viml' }


oop.inherits(VimLHighlightRules, TextHighlightRules);

exports.VimLHighlightRules = VimLHighlightRules;
});